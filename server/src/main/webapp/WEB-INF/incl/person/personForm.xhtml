<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
                xmlns:f="http://xmlns.jcp.org/jsf/core"
                xmlns:h="http://xmlns.jcp.org/jsf/html"
                xmlns:a4j="http://richfaces.org/a4j"
                xmlns:rich="http://richfaces.org/rich"
                xmlns:richext="http://xmlns.jcp.org/jsf/composite/richext"
                xmlns:gluufn="http://www.gluu.org/jsf/functions"
                xmlns:p="http://xmlns.jcp.org/jsf/passthrough"                
    			xmlns:fn="http://xmlns.jcp.org/jsp/jstl/functions"
                xmlns:ox="http://xmlns.jcp.org/jsf/composite/ox">

    <h:outputStylesheet>
        .attributeColumn {
            width: 350px;
            text-align: left;
            vertical-align: top;
        }

        .formColumn {
            text-align: left;
            vertical-align: top;
        }
        .col-xs-12 {
   			 width: 1100px;
    	}
		.content {
		    min-height: 250px;
		    padding: 15px;
		    margin-right: auto;
		    margin-left: auto;
		    padding-left: 15px;
		    padding-right: 15px;
		    overflow: scroll;
		}
		.rf-ii {
		    display: inline-block !important;
		    white-space: nowrap !important;
		    background-color: white !important;
		    border-bottom-width: 1px !important;
		    border-bottom-style: dotted !important;
		    border-bottom-color: #000000 !important;
		    padding-left: 3px !important;
		    padding-right: 3px !important;
		    display: inline-block !important;
		    position: relative !important;
		    width: 500px !important;
		    height: 31px !important;
		    overflow: hidden;
			text-overflow: ellipsis;
		}
		
		span:focus {
		    background:yellow;
		}
		
				.form-group {
		    margin-bottom: 15px;
		    display: inline-block;
		    width: 100%;
		    position: relative;
		    margin-left: 30px;
		}

		.form-group .right {
		    float: right;
		    width: 20%;
		}
		
		.form-group .left {
		    width: 30%;
		    float: left;
		    margin-right: 12px;
		}
		
		.form-group .middle {
		    width: 30%;
		    float: left;
		    margin-right: 12px;
		}
		
		
		.order-table{
	border-collapse:collapse;
	width:90%;
}

.order-table-header{
	text-align:center;
	background:none repeat scroll 0 0 #E5E5E5;
	border-bottom:1px solid #BBBBBB;
	padding:16px;
}

.order-table-odd-row{
	text-align:center;
	background:none repeat scroll 0 0 #FFFFFFF;
	border-top:1px solid #BBBBBB;
}

.order-table-even-row{
	text-align:center;
	background:none repeat scroll 0 0 #F9F9F9;
	border-top:1px solid #BBBBBB;
}
    </h:outputStylesheet>

    <h:outputScript>
        function changeAttributeVisibility(attrId, show) {
        	var attr = document.getElementById(attrId);

            if (show) {
	        	attr.style['display'] = '';
            } else {
	        	attr.style['display'] = 'none';
            }
        }
		
		function isViewPassword(buttonelementid) {
	    	isVisible = $("img[id$="+buttonelementid+"]").is(':visible');

    		return isVisible;
    	}
    	
    	function changeTextType(element,buttonelementid) {
    		var $element = $(element);
			if (isViewPassword(buttonelementid)) {
	    		$element[0].childNodes[2].childNodes[0].setAttribute('type','text');
			} else {
	    		$element[0].childNodes[2].childNodes[0].setAttribute('type','password');
			}
		}

		function hideSpanValue(element, value) {
    		var newValue = '';
    		for (i = 0;  i &lt; value.length ; i++)
    			newValue += '&bull;';
    		
    		var $element = $(element);
    		$element[0].childNodes[0].innerHTML = newValue;
		}

		function restoreSpanValue(element, value) {
    		var $element = $(element);
    		$element[0].childNodes[0].innerHTML = value;
		}
		
		function addIndex(){ 
			console.log("test index");
			$("input.rf-ii-fld").each(function(index){ 
				$(this).parent().parent().attr("tabIndex", index);
			});
			
			$("span[tabindex='0']").focus();
			
			//$("span:focus").keyup();
		}
		
		function switchTab(e) {
				var keyCode = e.keyCode || e.which; 
				if(keyCode === 9){ 
					var currentTabIndex = $(e.currentTarget).attr("tabindex");
					if(undefined !== currentTabIndex){
						currentTabIndex = (currentTabIndex == 0)  ? currentTabIndex+1 : currentTabIndex;
						currentTabIndex = parseInt(currentTabIndex);
						$("span[tabindex='"+currentTabIndex+"']").focus();
					}
				}
			}
		
		function viewValue(obj,elementid , eyeButtonid){
			passwordElement = $("input[id$='"+elementid+"Input']");
			passwordValue = passwordElement.val();

			passwordElementSpan = $("span[id$='"+elementid+"Label']");
			
			restoreSpanValue(passwordElementSpan.parent()[0], passwordValue);

			$(obj).css({"display":"none"});
			$(obj).siblings("img[id$='"+eyeButtonid+"']").css({"display":"block"});
		}
				
		function hideValue(obj,elementid,eyeButtonid){
			passwordElement = $("input[id$='"+elementid+"Input']");
			passwordValue = passwordElement.val();

			passwordElementSpan = $("span[id$='"+elementid+"Label']");
			
			hideSpanValue(passwordElementSpan.parent()[0], passwordValue);

			$(obj).css({"display":"none"});
			$(obj).siblings("img[id$='"+eyeButtonid+"']").css({"display":"block"});
		}
		
		function hidePasswordValue(element, value,buttonelementid) {
			if (isViewPassword(buttonelementid)) {
				return;
			}
			
			hideSpanValue(element, value);
		}
		
		
		$(document).ready(function(){
  			addIndex();
		});
		
    </h:outputScript>
    	<ui:include
		src="/WEB-INF/incl/person/u2fPage.xhtml" />
    <section class="content-header">
        <h1 style="color: #333;">
            #{msg['person.users']}
            <small><i class="fa fa-caret-right" style="color: #333 !important;"></i>  #{(updatePersonAction.update) ? msg['person.updateUser'] : msg['person.addUser'] }</small>
        </h1>
        <ol class="breadcrumb">
            <li><a href="#{request.contextPath}/home"><i class="fa fa-home"></i></a></li>
            <li class="organization/configuration">#{msg['person.addUpdateUser']}</li>
        </ol>
    </section>
    <section class="content">
        <div class="row">
            <div class="col-xs-12">
                <div class="box box-primary">
                    <div class="box-header">
                    </div>
                    <div style="display: inline-block; width: 100% !important;">
                        <h:form>
                            <h:panelGrid columns="3" width="100%" columnClasses="attributeColumn, , formColumn"
                                         border="0" cellpadding="0" cellspacing="0">

                                <h:panelGroup id="tabPanelGroupId">
                                    <rich:tabPanel switchType="client" id="attributeTabPanelId">
                                        <a4j:repeat var="origin" value="#{gluufn:toList(_customAttributeAction.attributeByOrigin)}">
                                            <rich:tab header="#{_customAttributeAction.originDisplayNames[origin.key]}">
	                                            <h4 style="font-size: 18px;text-decoration: underline;">#{msg['person.addAttributesToPerson']}</h4>
	                                            <a4j:repeat var="attr" value="#{origin.value}">
	                                            	<div>
                                                        <ui:param name="_aid"
                                                                  value="#{_customAttributeAction.attributeIds[attr]}"/>
		                                                 <a4j:commandLink p:aid="#{_aid}" value="#{attr.displayName}" action="#{_customAttributeAction.addCustomAttribute(attr.inum)}"
		                                                                  render="selectedCustomAttributesId"
		                                                                  oncomplete="changeAttributeVisibility('${component.clientId}', false);"
		                                                                  style="#{_customAttributeAction.containsCustomAttribute(attr) ? 'display: none;' : ''}" execute="@this">
		                                                     <f:event listener="#{_customAttributeAction.renderAttribute}" type="preRenderComponent" />
		                                                 </a4j:commandLink>
	                                                </div>
	                                            </a4j:repeat>
                                            </rich:tab>
                                        </a4j:repeat>
                                    </rich:tabPanel>
                                </h:panelGroup>

                                <richext:spacer width="10"/>

                                <h:panelGrid columns="1" width="100%" border="0" cellpadding="0" cellspacing="0">
                                    <h:panelGroup id="selectedCustomAttributesId">
										<script type="text/javascript">         
									        addIndex();
									    </script>
                                        <a4j:repeat value="#{_customAttributeAction.customAttributes}" var="_custAttr"
                                                    rowKeyVar="_custAttrIdx">
                                            <h:panelGroup rendered="#{_custAttr.metadata != null}">
                                                <ui:param name="_mandatory" value="#{_custAttr.mandatory}"/>
                                                <ui:param name="_mustEnter" value="#{_mandatory}"/>
                                                <a4j:repeat value="#{_custAttr.values}" var="_value" rowKeyVar="_valueIdx">
                                                    <f:event type="postValidate" listener="#{_customAttributeAction.validateAttributeValues}" />
                                                    <ui:param name="_aid"
                                                              value="#{_customAttributeAction.attributeIds[_custAttr.metadata]}"/>
                                                    <ox:decorate label="#{_custAttr.metadata.displayName} #{_valueIdx == 0 ? '' : _valueIdx}"
                                                                rendered="#{(_custAttr.adminCanEdit or _mustEnter) and (_custAttr.metadata.displayName ne 'Password')}">

														<div class="col-xs-10">
                                                            <rich:inplaceInput
                                                                    attribute="#{_custAttr.metadata}"
                                                                    value="#{_custAttr.values[_valueIdx]}"
                                                                    defaultLabel="#{msg['person.clickToEnter']} #{_custAttr.metadata.displayName} #{_valueIdx == 0 ? '' : _valueIdx}"
                                                                    id="custId_text_#{_custAttrIdx}"
                                                                    required="#{_mustEnter}"
                                                                    requiredMessage="#{msg['person.pleaseEnter']} #{_custAttr.metadata.displayName} #{_valueIdx == 0 ? '' : _valueIdx}. "
                                                                    rendered="#{(_custAttr.adminCanEdit or _mustEnter) and (_custAttr.metadata.dataType.value ne 'boolean') and (_custAttr.metadata.displayName ne 'Password') and (_custAttr.metadata.dataType.value ne 'certificate')}"
                                                                    onkeyup="switchTab(event)" >
																<rich:validator event="blur"/>
																<f:validator validatorId="attributeValidator" />                                                              
                                                            </rich:inplaceInput>
                                                            <h:selectOneMenu styleClass="form-control"
                                                                             value="#{updatePersonAction.gluuStatus}"
                                                                             required="#{_mustEnter}"
                                                                             id="statusId"
                                                                             rendered="#{(_custAttr.adminCanEdit or _mustEnter) and (_custAttr.metadata.dataType.value eq 'boolean') and (_custAttr.metadata.displayName eq 'User Status') }">
                                                                <f:selectItems
                                                                        value="#{updatePersonAction.activeInactiveStatuses}"
                                                                        var="_type" itemLabel="#{_type.displayName}"/>
                                                                <f:converter
                                                                        converterId="org.gluu.jsf2.converter.EnumConverter"/>
                                                            </h:selectOneMenu>
                                                            <h:selectOneMenu styleClass="form-control"
                                                                             value="#{_custAttr.booleanValues[_valueIdx]}"
                                                                             required="#{_mustEnter}"
                                                                             id="custId_boolean#{_custAttrIdx}"
                                                                             rendered="#{(_custAttr.adminCanEdit or _mustEnter) and (_custAttr.metadata.dataType.value eq 'boolean') and (_custAttr.metadata.displayName ne 'User Status') }">
                                                                <f:selectItems
                                                                        value="#{organizationService.javaBooleanSelectionTypes}"
                                                                        var="_type" itemLabel="#{_type.displayName}"/>
                                                                <f:converter
                                                                        converterId="org.gluu.jsf2.converter.EnumConverter"/>
                                                            </h:selectOneMenu>
                                                            
                                                            <h:inputTextarea cols="40" rows="3"
                                                            		styleClass="form-control"
                                                                    value="#{_custAttr.values[_valueIdx]}"
                                                                    required="#{_mustEnter}"
                                                                    requiredMessage="#{msg['person.pleaseEnter']} #{_custAttr.metadata.displayName} #{_valueIdx == 0 ? '' : _valueIdx}. "
                                                                    rendered="#{(_custAttr.adminCanEdit or _mustEnter) and (_custAttr.metadata.dataType.value eq 'certificate')}" >
																<rich:validator event="blur"/>
																<f:validator validatorId="attributeValidator" />                                                              
                                                            </h:inputTextarea>
                                                        </div>
                                                        
                                                        <h:outputText value="&#160;"/>                                                        
                                                        
                                                        <!-- <div class="col-xs-2"> -->
                                                            <a4j:commandLink
                                                                    action="#{_customAttributeAction.removeCustomAttribute(_custAttr.metadata.inum)}"
                                                                    render="selectedCustomAttributesId"
                                                                    styleClass="glyphicon glyphicon-remove"
                                                                    onbegin="changeAttributeVisibility('#{_aid}', true);"
                                                                    rendered="#{_custAttr.adminCanEdit and not _mandatory and not _custAttr.metadata.oxMultivaluedAttribute.value}" execute="@this">
                                                            </a4j:commandLink>
                                                            <a4j:commandLink
                                                                    action="#{_customAttributeAction.removeCustomAttribute(_custAttr.metadata.inum)}"
                                                                    render="selectedCustomAttributesId"
                                                                    styleClass="glyphicon glyphicon-remove"
                                                                    onbegin="changeAttributeVisibility('#{_aid}', true);"
                                                                    rendered="#{_custAttr.adminCanEdit and not _mandatory and _custAttr.metadata.oxMultivaluedAttribute.value and fn:length(_custAttr.values) eq 1 }" execute="@this">
                                                            </a4j:commandLink>
                                                            <a4j:commandLink
                                                                    action="#{_customAttributeAction.removeMultiValuesInAttributes(_custAttr.metadata.inum,_mandatory,_custAttr.values[_valueIdx])}"
                                                                    render="selectedCustomAttributesId"
                                                                    styleClass="glyphicon glyphicon-remove"
                                                                    rendered="#{_custAttr.adminCanEdit and not _mandatory and _custAttr.metadata.oxMultivaluedAttribute.value and fn:length(_custAttr.values) gt 1 }" execute="@this">
                                                            </a4j:commandLink>
                                                            <a4j:commandLink
                                                            		action="#{_customAttributeAction.addMultiValuesInAttributes(_custAttr.metadata.inum,_mandatory)}"
                                                                    render="selectedCustomAttributesId"
                                                                    styleClass="glyphicon glyphicon-plus"
                                                                    rendered="#{_custAttr.adminCanEdit and _custAttr.metadata.oxMultivaluedAttribute.value and _valueIdx == 0}" execute="@this">
                                                            </a4j:commandLink>
                                                            
                                                            <!-- </div> -->
                                                    </ox:decorate>

                                                    <ox:decorate
                                                                rendered="#{not (_custAttr.adminCanEdit or _mustEnter)}" label="#{_custAttr.metadata.displayName}">
                                                        <h:outputText style="margin-left:19px;"
                                                                      value="#{_custAttr.values[_valueIdx]}"
                                                                      rendered="#{not (_custAttr.adminCanEdit or _mustEnter) and (_custAttr.metadata.displayName ne 'memberOf')}"/>
                                                        <h:outputText style="margin-left:19px;"
                                                                      value="#{updatePersonAction.getGroupName(_custAttr.values[_valueIdx])}"
                                                                      rendered="#{not (_custAttr.adminCanEdit or _mustEnter) and (_custAttr.metadata.displayName eq 'memberOf')}"/>
                                                        <h:outputText value="&#160;"/>
                                                        <a4j:commandLink
                                                                action="#{_customAttributeAction.removeCustomAttribute(_custAttr.metadata.inum)}"
                                                                render="selectedCustomAttributesId"
                                                                onbegin="changeAttributeVisibility('#{_aid}', true);"
                                                                rendered="#{_custAttr.adminCanEdit and not _mandatory}" execute="@this">
                                                            <h:graphicImage value="/img/remove.gif"/>
                                                        </a4j:commandLink>
                                                 	</ox:decorate>
                                                        
                                                        
                                                 	<ox:decorate label="#{msg['person.password']}" rendered="#{(_custAttr.adminCanEdit or _mustEnter) and (_custAttr.metadata.displayName eq 'Password')}">
														<div class="col-xs-10">                                                                                           
                                                            
                                                            <rich:inplaceInput
                                                            		defaultLabel="#{msg['person.clickToEnter']} #{msg['person.password']}"
                                                                    id="custpasswordId" styleClass="togglefield"
                                                                    validator="#{updatePersonAction.validateConfirmPassword}"
                                                                    required="#{_mustEnter}"
                                                                    requiredMessage="#{msg['person.pleaseEnter']} #{_custAttr.metadata.displayName}. "
                                                                    rendered="#{(_custAttr.adminCanEdit or _mustEnter) and (_custAttr.metadata.displayName eq 'Password')}" 
                                                                    onfocus="changeTextType(this,'hidePassword');"
                                                                    onkeyup="switchTab(event)">
                                                                <rich:validator event="blur" oncomplete="hidePasswordValue(this, #{rich:component('custpasswordId')}.getValue(),'hidePassword')"/>
                                                            </rich:inplaceInput>                                                             
							                                <h:graphicImage value="/img/eye.png" id="viewPassword" onclick="return viewValue(this,'custpasswordId','hidePassword');"/>
							                                <h:graphicImage value="/img/eye-hidden.png" id="hidePassword" style="display: none;" onclick="return hideValue(this,'custpasswordId','viewPassword');"/>
                                                        </div>
                                                     </ox:decorate>               
                                                        
                                                     <ox:decorate label="#{msg['person.confirmPassword']}" rendered="#{(_custAttr.adminCanEdit or _mustEnter) and (_custAttr.metadata.displayName eq 'Password')}">
														<div class="col-xs-10">                                                                                           
                                                            <rich:inplaceInput       
                                                                    defaultLabel="#{msg['person.clickToEnter']} #{msg['person.confirmPassword']}"
                                                                    maxlength="50" id="custconfirmpasswordId"
                                                                    validator="#{updatePersonAction.validateConfirmPassword}"
                                                                    required="#{_mustEnter}"
                                                                    requiredMessage="Please enter Confirm Password" 
                                                                    rendered="#{(_custAttr.adminCanEdit or _mustEnter) and (_custAttr.metadata.displayName eq 'Password')}"
                                                                    onfocus="changeTextType(this,'hideCustPassword');"
                                                                    onkeyup="switchTab(event)">
                                                                <rich:validator event="blur" oncomplete="hidePasswordValue(this, #{rich:component('custconfirmpasswordId')}.getValue(),'hideCustPassword')"/>
                                                            </rich:inplaceInput> 
                                                            <h:graphicImage value="/img/eye.png" id="viewCustPassword" onclick="return viewValue(this,'custconfirmpasswordId','hideCustPassword');"/>
							                                <h:graphicImage value="/img/eye-hidden.png" id="hideCustPassword" style="display: none;" onclick="return hideValue(this,'custconfirmpasswordId','viewCustPassword');"/>
                                                                                                                    
                                                        </div>
                                                     </ox:decorate>                                                        
                                                  
                                                </a4j:repeat>
                                            	
                                            </h:panelGroup>
                                        </a4j:repeat>
                                        
                                    <ox:decorate label="#{msg['person.authenticationmethods']}" rendered="#{updatePersonAction.deviceDataMap.size() gt 0}" />    
									<h:dataTable value="#{updatePersonAction.deviceDataMap}" var="_value"
						    			styleClass="order-table"
						    			headerClass="order-table-header"
						    			rowClasses="order-table-odd-row,order-table-even-row" rendered="#{updatePersonAction.deviceDataMap.size() gt 0}">
										
										<h:column>
						    				<!-- column header -->
						    				<f:facet name="header">Id</f:facet>
						    				<!-- row record -->
						    				
						    				<!-- <h:outputText  value="#{_value.id}"  rendered="#{not _value.id.contains(':')}" /> -->
											<h:panelGroup id="U2fPanelid">
												<a4j:commandLink id="u2fConfig"   action="#{updatePersonAction.fetchFidoRecord(_value.id)}"
													value="#{_value.id}"
													rendered="#{not _value.id.contains(':')}"
													render=":U2fPanel"
													oncomplete="#{rich:component('U2fPanel')}.show();"
													execute="@this" />
											</h:panelGroup>
										</h:column>
						    			
						    			<h:column>
						    				<!-- column header -->
						    				<f:facet name="header">Nickname</f:facet>
						    				<!-- row record -->
						    				#{_value.nickName}
						    			</h:column>
						
						    			<h:column>
						    				<f:facet name="header">Modality</f:facet>
						    				#{_value.modality}
						    			</h:column>
						
						    			<h:column>
						    				<f:facet name="header">Date Added</f:facet>
						    				#{_value.creationDate}
						    			</h:column>
						
						    			<h:column>
						    				<f:facet name="header">Remove</f:facet>
						    				<a4j:commandLink
														action="#{updatePersonAction.removeDevice(_value)}"
														render="selectedCustomAttributesId"
														styleClass="glyphicon glyphicon-remove">
											</a4j:commandLink>
						    			</h:column>
						
						    		</h:dataTable>
                                    </h:panelGroup>
                                </h:panelGrid>
                            </h:panelGrid>

                            <richext:spacer height="16"/>

                            <ui:insert name="controlButtons"/>
                        </h:form>
                    </div>
                </div>
            </div>
        </div>
    </section>
</ui:composition>
